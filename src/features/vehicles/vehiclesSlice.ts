import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../redux";
import { getVehicles } from "../../API/getVehicles/getVehicles";

export interface vehiclesState {
  value: any[] | null;
  status: "idle" | "loading" | "failed";
}

const initialState: vehiclesState = {
  value: [],
  status: "idle",
};

export const fetchVehicles = createAsyncThunk(
  "vehicles/fetchVehicles",
  async () => {
    const response = await getVehicles({});
    return response.data;
  }
);

export const vehiclesSlice = createSlice({
  name: "vehicles",
  initialState,
  reducers: {
  },
  // The extraReducers field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchVehicles.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchVehicles.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = action.payload;
      });
  },
});

//Export the reducer functions
export const vehiclesSelector = (state: RootState) => state.vehiclesKey.value;
export default vehiclesSlice.reducer;
